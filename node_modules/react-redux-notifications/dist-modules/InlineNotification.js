'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRedux = require('react-redux');

var _notifications = require('./notifications.redux');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var InlineNotification = function (_React$Component) {
  _inherits(InlineNotification, _React$Component);

  function InlineNotification(props) {
    _classCallCheck(this, InlineNotification);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(InlineNotification).call(this, props));

    _this.dismiss = _this.dismiss.bind(_this);
    return _this;
  }

  _createClass(InlineNotification, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.dispatchListen(this.props);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      var triggeredBy = Array.isArray(this.props.triggeredBy) ? this.props.triggeredBy : [this.props.triggeredBy];
      this.props.dispatch((0, _notifications.unlisten)(triggeredBy));
    }
  }, {
    key: 'componentDidReceiveProps',
    value: function componentDidReceiveProps(nextProps) {
      if (this.props.triggeredBy !== nextProps.triggeredBy || this.props.hideAfter !== nextProps.hideAfter || this.props.defaultMessage !== nextProps.defaultMessage) {
        this.componentWillUnmount();
        this.dispatchListen(nextProps);
      }
    }
  }, {
    key: 'dispatchListen',
    value: function dispatchListen(props) {
      props.dispatch((0, _notifications.listen)({
        triggeredBy: Array.isArray(props.triggeredBy) ? props.triggeredBy : [props.triggeredBy],
        hideAfter: props.hideAfter,
        defaultMessage: props.defaultMessage,
        showDismiss: props.showDismiss
      }));
    }
  }, {
    key: 'dismiss',
    value: function dismiss(notification) {
      this.props.dispatch((0, _notifications.hide)(notification.trigger.type, notification.key));
    }
  }, {
    key: 'renderNotification',
    value: function renderNotification(notification, dismiss) {
      return _react2.default.createElement(
        'div',
        { className: 'notification', key: notification.key },
        notification.message,
        notification.showDismiss && _react2.default.createElement(
          'span',
          { className: 'notification_dismiss', onClick: dismiss },
          'x'
        )
      );
    }
  }, {
    key: 'renderContainer',
    value: function renderContainer(notifications) {
      return _react2.default.createElement(
        'div',
        null,
        notifications
      );
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var renderNotification = this.props.renderNotification || this.renderNotification;
      var renderContainer = this.props.renderContainer || this.renderContainer;
      var notificationsForMe = this.props.notifications[this.props.triggeredBy] || [];
      return renderContainer(notificationsForMe.map(function (n) {
        return renderNotification(n, function () {
          return _this2.dismiss(n);
        });
      }));
    }
  }]);

  return InlineNotification;
}(_react2.default.Component);

InlineNotification.propTypes = {
  dispatch: _react2.default.PropTypes.func.isRequired,
  triggeredBy: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.string, _react2.default.PropTypes.arrayOf(_react2.default.PropTypes.string)]).isRequired,
  notifications: _react2.default.PropTypes.object.isRequired,
  defaultMessage: _react2.default.PropTypes.string,
  hideAfter: _react2.default.PropTypes.number,
  renderNotification: _react2.default.PropTypes.func,
  renderContainer: _react2.default.PropTypes.func
};

exports.default = (0, _reactRedux.connect)(function (state) {
  return {
    notifications: state.notifications.notifications
  };
})(InlineNotification);